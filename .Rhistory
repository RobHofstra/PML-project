se <- 2.745*sqrt(1/9)
2.745/3
t <- (-3-1)/se
t
pt(t)
pt(t,16)
pt(t,18)
t <- (1-3)/se
pt(t,16)
t <- (1+3)/se
pt(t,16)
t2 <- (1+3)/se
t1 <- (-3-1)/se
pt1(t1,16)
p1 <- pt(t1,16)
p2 <- pt(t2,16)
p1+p1
p1+p2
pnorm(-abs(t1))
pnorm(-abs(t1))*2
ppois(10,lambda=0.01*1787)
sqrt(2.745)/3
t1 <- -4/0.55
t2 <- 4/0.55
pt(t1,18)
pt(t1,16)
pt(t2,16)
pt(t1,18)
x <- seq(-10,10,length=1000)
manipulate()
install.packages("manipulate")
library(manipulate)
manipulate()
manipulate(
plot(x,exp(beta0+beta1*x)/(1+exp(beta0+beta1*))),
library(mass)
library(MASS)
?shuttle
data(shuttle)
str(shuttle)
auto <- glm(use~wind,data=shuttle,family=binomial)
auto
summary(auto)
auto$coeff
exp(auto$coeff)
shuttlelog <- glm(use~wind,magn,data=shuttle)
shuttlelog <- glm(use~wind+magn,data=shuttle)
shuttlelog <- glm(use~wind+magn,data=shuttle,family=binomial)
shuttlelog
summary(shuttlelog)
shuttlelog$coeff
exp(shuttlelog$coeff)
auto <- glm(1-use~wind,data=shuttle,family=binomial)
str(shuttle)
shuttle$nouse <- 1-shutle$use
shuttle$nouse <- 1-shuttle$use
shuttle$nouse <- 1-as.numeric(shuttle$use)
str(shuttle)
table(shutle$nuuse)
table(shutle$nouse)
table(shuttle$nouse)
shuttle$nouse <- 2-as.numeric(shuttle$use)
table(shuttle$nouse)
head(shuttle)
shuttle$nouse <- as.factor(shuttle$nouse)
head(shuttle)
str(shuttle)
noauto <- glm(nouse~wind,data=shuttle,family=binomial)
sumamry(auto)
summary(auto)
summary(noauto)
data(InsectSprays)
str(InsectSprays)
IS <- glm(count~spray,data=InsectSprays,family=poisson)
summary(IS)
IS2 <- glm(count~spray+offeset(log(10)),data=InsectSprays,family=poisson)
IS2 <- glm(count~spray+offset(log(10)),data=InsectSprays,family=poisson)
IS2 <- glm(count~spray,offset(log(10)),data=InsectSprays,family=poisson)
IS2 <- glm(count~spray,offset=log(10),data=InsectSprays,family=poisson)
data(arctic.oscillations)
library(UsingR)
data(arctic.oscillations)
ao <- artic.oscillations
ao <- arctic.oscillations
str(ao)
data(aosat)
str(aosat)
head(aosat)
aofit1 <- glm(V2~V1,data-aosat,family=poisson)
aofit1 <- glm(V2~V1,data=aosat,family=poisson)
aofit1 <- glm(V2~abs(V1),data=aosat,family=poisson)
aofit1 <- glm(V2~V1,offset=log(1),data=aosat,family=poisson)
data(breakdown)
str(breakdown)
head(breakdown)
bd1 <- glm(voltage~time,data=breakdown,family=poisson)
summary(bd1)
bd2 <- glm(voltage~time,offset=log(10),data=breakdown,family=poisson)
bd2 <- glm(voltage~time+offset(log(10)),data=breakdown,family=poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- 0
splineTerms <- sapply(knots,function(knot) (x>knot)*(y-knot))
xMat <- cbind(1,x,splineTerms)
yhat <- predict(lm(y~xMat-1))
lines(x,yhat,col="red")
summary(IS)
log(0.05588)
exp(0.05588)
exp(-0.05588)
install.packages("swirl")
library(swirl)
library(swirl)
swirl
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,col="red")
summary(regrline)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
est()
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
str(AlzheimerDisease)
str(predictors)
dim(diagnosis)
lenght(diagnosis)
length(diagnosis)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
hist(training$Superplasticizer)
summary(training)
hist( log(training$SuperPlasticizer + 1))
LSP <- log(training$SuperPlasticizer + 1)
hist(LSP)
LSP
log(0)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
ILT <- training[,[68:79]]
ILT <- training[,68:79]
str(ILT)
ILT <- training[,58:69]
str(ILT)
cor(ILT)
M <- abs(cor(ILT))
which(M>0.9,arr.ind=T)
ILPC <- prcomp(ILT)
str(ILPC)
plot(ILPC$x[,1],ILPC$x[,2])
ILPC$rotation
pp5 <- preProcess(ILT,method="pca",pcacomp=5)
training[,grep("^IL",names(training))]
trainIL <- training[,grep("^IL",names(training))]
trainPC <- preProcess(trainIL,method="pca",thresh=0.9)
str(trainPC)
trainPC$numComp
trainILD <- c(trainIL,diagnosis)
trainILD <- cbind(trainIL,diagnosis)
data(AlzheimerDisease)
summary(diagnosis)
trainILD <- cbind(trainIL,training$diagnosis)
fit1 <- train(training$diagnosis~.method="glm",data=trainingILD)
fit1 <- train(training$diagnosis~.,method="glm",data=trainingILD)
fit1 <- train(training$diagnosis~.,method="glm",data=trainILD)
warnings()
fit2 <- train(training$diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=trainILD)
fit1 <- train(diagnosis~.,method="glm",data=trainILD)
str(trainILD)
summary(trainILD)
fit1 <- train(training$diagnosis~.,method="glm",data=trainILD)
fit2 <- train(training$diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=trainILD)
trainPC <- preProcess(trainIL,method="glm",thresh=0.8)
trainPC <- preProcess(trainIL,method="pca",thresh=0.8)
str(trainPC)
preProc <- preProcess(trainIL,method="pca",thresh=0.8)
trainPC <- predict(preProc,trainIL)
fit2 <- train(trainPCD$diagnosis~.,method="glm",data=trainPCD)
trainPCD <- cbind(trainPC,training$diagnosis)
fit2 <- train(trainPCD$diagnosis~.,method="glm",data=trainPCD)
summary(trainPCD)
fit2 <- train(training$diagnosis~.,method="glm",data=trainPCD)
fit1
fit2
summary(fit1)
str(fit1)
testIL <- testing[,grep("^IL",names(testing))]
testILD <- cbind(testIL,testing$diagnosis)
testPC1 <- predict(fit1,testIL)
names(trainILD$training$diagnosis) <- diagnosis
names(trainILD[13]) <- diagnosis
names(trainILD)[13] <- diagnosis
names(trainILD)
str(trainILD)
trainILD <- cbind(trainIL,training$diagnosis)
str(trainILD)
names(trainILD)[13] <- "diagnosis"
names(trainILD)
testILD <- cbind(testIL,testing$diagnosis)
names(testILD)[13] <- "diagnosis"
fit1 <- train(diagnosis~.,method="glm",data=trainILD)
testPC1 <- predict(fit1,testIL)
confusionMatrix(testILD$diagnosis,predict(fit1,testPC1))
confusionMatrix(testILD$diagnosis,testPC1)
names(trainPCD)[8] <- "diagnosis"
names(trainPCD)
fit2 <- train(diagnosis~.,method="glm",data=trainPCD)
testPC2 <- predict(fit2,testIL)
testPC2 <- predict(preProc,testIL)
confusionMatrix(testILD$diagnosis,predict(fit2,testILD))
confusionMatrix(testILD$diagnosis,predict(fit2,testPC2))
#Q2.3
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainIL <- training[,grep("^IL",names(training))]
testIL <- testing[,grep("^IL",names(testing))]
trainPC <- preProcess(trainIL,method="pca",thresh=0.9)
trainPC$numComp
#Q2.4
trainILD <- cbind(trainIL,training$diagnosis)
names(trainILD)[13] <- "diagnosis"
testILD <- cbind(testIL,testing$diagnosis)
names(testILD)[13] <- "diagnosis"
fit1 <- train(diagnosis~.,method="glm",data=trainILD)
testPC1 <- predict(fit1,testIL)
confusionMatrix(testILD$diagnosis,testPC1)
preProc <- preProcess(trainIL,method="pca",thresh=0.8)
trainPC <- predict(preProc,trainIL)
trainPCD <- cbind(trainPC,training$diagnosis)
names(trainPCD)[8] <- "diagnosis"
fit2 <- train(diagnosis~.,method="glm",data=trainPCD)
testPC2 <- predict(preProc,testIL)
confusionMatrix(testILD$diagnosis,predict(fit2,testPC2))
setwd("/Volumes/Seagate Backup 4T/iTunes Media/iTunes U/Coursera/Data Science Specialization/8. Practical Machine Learning/Project")
datafile <- "pml-training.csv"
har <- read.csv(datafile, stringsAsFactors = FALSE)
har$X <- NULL
har$user_name <- as.factor(har$user_name)
har$raw_timestamp_part_1 <- NULL
har$raw_timestamp_part_2 <- NULL
har$cvtd_timestamp <- NULL
har$new_window <- NULL
har$num_window <- NULL
har$kurtosis_roll_belt <- NULL
har$kurtosis_picth_belt <- NULL
har$kurtosis_yaw_belt <- NULL
har$skewness_roll_belt <- NULL
har$skewness_roll_belt.1 <- NULL
har$skewness_yaw_belt <- NULL
har$max_roll_belt <- NULL
har$max_picth_belt <- NULL
har$max_yaw_belt <- NULL
har$min_roll_belt <- NULL
har$min_pitch_belt <- NULL
har$min_yaw_belt <- NULL
har$amplitude_roll_belt <- NULL
har$amplitude_pitch_belt <- NULL
har$amplitude_yaw_belt <- NULL
har$var_total_accel_belt <- NULL
har$avg_roll_belt <- NULL
har$stddev_roll_belt <- NULL
har$var_roll_belt <- NULL
har$avg_pitch_belt <- NULL
har$stddev_pitch_belt <- NULL
har$var_pitch_belt <- NULL
har$avg_yaw_belt <- NULL
har$stddev_yaw_belt <- NULL
har$var_yaw_belt <- NULL
har$var_accel_arm <- NULL
har$avg_roll_arm <- NULL
har$stddev_roll_arm <- NULL
har$var_roll_arm <- NULL
har$avg_pitch_arm <- NULL
har$stddev_pitch_arm <- NULL
har$var_pitch_arm <- NULL
har$avg_yaw_arm <- NULL
har$stddev_yaw_arm <- NULL
har$var_yaw_arm <- NULL
har$kurtosis_roll_arm <- NULL
har$kurtosis_picth_arm <- NULL
har$kurtosis_yaw_arm <- NULL
har$skewness_roll_arm <- NULL
har$skewness_pitch_arm <- NULL
har$skewness_yaw_arm <- NULL
har$max_roll_arm <- NULL
har$max_picth_arm <- NULL
har$max_yaw_arm <- NULL
har$min_roll_arm <- NULL
har$min_pitch_arm <- NULL
har$min_yaw_arm <- NULL
har$amplitude_roll_arm <- NULL
har$amplitude_pitch_arm <- NULL
har$amplitude_yaw_arm <- NULL
har$kurtosis_roll_dumbbell <- NULL
har$kurtosis_picth_dumbbell <- NULL
har$kurtosis_yaw_dumbbell <- NULL
har$skewness_roll_dumbbell <- NULL
har$skewness_pitch_dumbbell <- NULL
har$skewness_yaw_dumbbell <- NULL
har$max_roll_dumbbell <- NULL
har$max_picth_dumbbell <- NULL
har$max_yaw_dumbbell <- NULL
har$min_roll_dumbbell <- NULL
har$min_pitch_dumbbell <- NULL
har$min_yaw_dumbbell <- NULL
har$amplitude_roll_dumbbell <- NULL
har$amplitude_pitch_dumbbell <- NULL
har$amplitude_yaw_dumbbell <- NULL
har$var_accel_dumbbell <- NULL
har$avg_roll_dumbbell <- NULL
har$stddev_roll_dumbbell <- NULL
har$var_roll_dumbbell <- NULL
har$avg_pitch_dumbbell <- NULL
har$stddev_pitch_dumbbell <- NULL
har$var_pitch_dumbbell <- NULL
har$avg_yaw_dumbbell <- NULL
har$stddev_yaw_dumbbell <- NULL
har$var_yaw_dumbbell <- NULL
har$kurtosis_roll_forearm <- NULL
har$kurtosis_picth_forearm <- NULL
har$kurtosis_yaw_forearm <- NULL
har$skewness_roll_forearm <- NULL
har$skewness_pitch_forearm <- NULL
har$skewness_yaw_forearm <- NULL
har$max_roll_forearm <- NULL
har$max_picth_forearm <- NULL
har$max_yaw_forearm <- NULL
har$min_roll_forearm <- NULL
har$min_pitch_forearm <- NULL
har$min_yaw_forearm <- NULL
har$amplitude_roll_forearm <- NULL
har$amplitude_pitch_forearm <- NULL
har$amplitude_yaw_forearm <- NULL
har$var_accel_forearm <- NULL
har$avg_roll_forearm <- NULL
har$stddev_roll_forearm <- NULL
har$var_roll_forearm <- NULL
har$avg_pitch_forearm <- NULL
har$stddev_pitch_forearm <- NULL
har$var_pitch_forearm <- NULL
har$avg_yaw_forearm <- NULL
har$stddev_yaw_forearm <- NULL
har$var_yaw_forearm <- NULL
har$classe <- as.factor(har$classe)
library(doParallel)
cl <- makeCluster(detectCores())
cl
registerDoParallel(cl)
library(caret)
tc <- trainControl(method="cv", number=5)
fitRF <- train(classe ~ ., method = 'rf', data = har, trainControl = tc)
stopCluster(cl)
har$user_name <- NULL
registerDoParallel(cl)
fitRF <- train(classe ~ ., method = 'rf', data = har)
tc <- trainControl(method="cv", number=1)
fitRF <- train(classe ~ ., method = 'rf', data = har, trainControl = tc)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
fitRF <- train(classe ~ ., method = 'rf', data = har, trainControl = tc)
fitRF
library(doParallel,rattle)
library(doParallel;rattle)
library(rattle)
library(caret)
inTrain <- createDataPartition(y=har$classe, p=0.5, list = FALSE)
training <- har[inTrain,]
testing <- har[-inTrain,]
cl <- makeCluster(detectCores())
registerDoParallel(cl)
treeFit <- train(classe ~ ., method = 'rpart', data = training)
stopCluster(cl)
treeFit$finalModel
fancyRpartPlot(treeFit$finalModel)
fancyRpartPlot(treeFit$finalModel,sub = "")
treePred <- predict(treeFit,newdata = testing)
table(treePred,testing$classe)
treePred
summary(treeFit)
summary(treePred)
treePred$confusionMatrix
treePred
stopCluster(cl)
confusionMatrix(rfFit)
confusionMatrix(treeFit,testing$classe)
confusionMatrix(treePred,testing$classe)
registerDoParallel(cl)
rfFit <- train(classe ~ ., method = 'rf', data = training)
stopCluster(cl)
registerDoParallel(cl)
rfFit <- train(classe ~ ., method = 'rf', data = training)
stopCluster(cl)
